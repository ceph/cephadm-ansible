---
# Copyright Red Hat
# SPDX-License-Identifier: Apache-2.0
#
# This playbook configures the Ceph repository.
# It also installs some prerequisites (podman, lvm2, chronyd, cephadm, ...)
#
# Usage:
#
# ansible-playbook -i <inventory host file> cephadm-preflight.yml
#
# You can limit the execution to a set of hosts by using `--limit` option:
#
# ansible-playbook -i <inventory host file> cephadm-preflight.yml --limit <my_osd_group|my_node_name>
#
# You can override variables using `--extra-vars` parameter:
#
# ansible-playbook -i <inventory host file> cephadm-preflight.yml --extra-vars "ceph_origin=rhcs"
#
# If you plan to deploy 'client' nodes, you must add a group called 'clients' in your inventory:
#
# $ cat hosts
# mynode1
# mynode2
# mynode3
#
# [clients]
# client1
# client2
# client3
#
# Then, you can run the the same way as shown above. The playbook will automatically install
# chronyd and ceph-common on those nodes.

- name: variables validations
  ansible.builtin.import_playbook: validate/preflight.yml

- hosts: all
  become: true
  gather_facts: true
  tasks:
    - name: import_role ceph_defaults
      import_role:
        name: ceph_defaults

    - name: rhcs related tasks
      when: ceph_origin == 'rhcs'
      block:
        - name: enable red hat storage tools repository
          rhsm_repository:
            name: "rhceph-{{ ceph_rhcs_version }}-tools-for-rhel-8-{{ ansible_facts['architecture'] }}-rpms"

    - name: enable repo from download.ceph.com
      when: ceph_origin == 'community'
      block:
        - name: configure red hat ceph community repository stable key
          rpm_key:
            key: "{{ ceph_stable_key }}"
            state: present
          register: result
          until: result is succeeded

<<<<<<< HEAD
        - name: configure red hat ceph stable community repository
          yum_repository:
            name: ceph_stable
            description: Ceph Stable $basearch repo
            gpgcheck: yes
            state: present
            gpgkey: "{{ ceph_stable_key }}"
            baseurl: "{{ ceph_mirror }}/rpm-{{ ceph_release }}/el{{ ansible_facts['distribution_major_version'] }}/$basearch"
            file: ceph_stable
            priority: '2'
          register: result
          until: result is succeeded

        - name: configure red hat ceph stable noarch community repository
          yum_repository:
            name: ceph_stable_noarch
            description: Ceph Stable noarch repo
            gpgcheck: yes
            state: present
            gpgkey: "{{ ceph_stable_key }}"
            baseurl: "{{ ceph_mirror }}/rpm-{{ ceph_release }}/el{{ ansible_facts['distribution_major_version'] }}/noarch"
            file: ceph_stable
            priority: '2'
          register: result
          until: result is succeeded
=======
        - name: enable repo from download.ceph.com
          when: ceph_origin in ['community', 'ibm']
          block:
            - name: set_fact _ceph_repo
              set_fact:
                _ceph_repo:
                  - name: ceph_stable
                    description: "{{ 'Ceph Stable repo' if ceph_origin == 'community' else 'IBM Ceph repo' }}"
                    rpm_key: "{{ ceph_stable_key if ceph_origin == 'community' else ceph_ibm_key }}"
                    baseurl: "{{ ceph_community_repo_baseurl if ceph_origin == 'community' else ceph_ibm_repo_baseurl }}"
>>>>>>> 2dd8356 (preflight: fix a typo)

    - name: enable repo from shaman - dev
      when: ceph_origin == 'shaman'
      block:
        - name: fetch ceph red hat development repository
          uri:
            url: https://shaman.ceph.com/api/repos/ceph/{{ ceph_dev_branch }}/{{ ceph_dev_sha1 }}/centos/{{ ansible_facts['distribution_major_version'] }}/repo?arch={{ ansible_facts['architecture'] }}  # noqa 204
            return_content: yes
          register: ceph_dev_yum_repo

        - name: configure ceph red hat development repository
          copy:
            content: "{{ ceph_dev_yum_repo.content }}"
            dest: /etc/yum.repos.d/ceph-dev.repo
            owner: root
            group: root
            mode: '0644'
            backup: yes

    - name: enable custom repo
      when: ceph_origin == 'custom'
      block:
        - name: set_fact ceph_custom_repositories
          set_fact:
            ceph_custom_repositories:
              - name: ceph_custom
                description: Ceph custom repo
                gpgcheck: "{{ 'yes' if custom_repo_gpgkey is defined else 'no' }}"
                state: "{{ custom_repo_state | default('present') }}"
                gpgkey: "{{ custom_repo_gpgkey | default(omit) }}"
                baseurl: "{{ custom_repo_url }}"
                enabled: "{{ custom_repo_enabled | default(1) }}"
                file: ceph_custom
                priority: '2'
          when: ceph_custom_repositories is undefined

        - name: setup custom repositories
          yum_repository:
            name: "{{ item.name }}"
            description: "{{ item.description }}"
            state: "{{ item.state | default(omit) }}"
            gpgcheck: "{{ item.gpgcheck | default(omit) }}"
            gpgkey: "{{ item.gpgkey | default(omit) }}"
            baseurl: "{{ item.baseurl }}"
            file: "{{ item.ceph_custom | default(omit) }}"
            priority: "{{ item.priority | default(omit) }}"
            enabled: "{{ custom_repo_enabled | default(1) }}"
          register: result
          until: result is succeeded
          loop: "{{ ceph_custom_repositories }}"

    - name: install epel-release
      package:
        name: epel-release
        state: present
      register: result
      until: result is succeeded
      when: ansible_facts['distribution'] == 'CentOS'

    - name: install ceph-common on rhel
      command: dnf install --allowerasing --assumeyes ceph-common
      changed_when: false
      register: result
      until: result is succeeded

    - name: install prerequisites packages
      package:
        name: "{{ ceph_client_pkgs if group_names == [client_group] else ceph_pkgs | unique }}"
        state: "{{ (upgrade_ceph_packages | bool) | ternary('latest', 'present') }}"
      register: result
      until: result is succeeded

    - name: ensure chronyd is running
      service:
        name: chronyd
        state: started
        enabled: yes

- name: set insecure container registry in /etc/containers/registries.conf
  ansible.builtin.import_playbook: cephadm-set-container-insecure-registries.yml
  when: set_insecure_registries | default(false) | bool
