---
# Copyright Red Hat
# SPDX-License-Identifier: Apache-2.0
#
# This playbook configures the Ceph repository.
# It also installs some prerequisites (podman, lvm2, chronyd, cephadm, ...)
#
# Usage:
#
# ansible-playbook -i <inventory host file> cephadm-preflight.yml
#
# You can limit the execution to a set of hosts by using `--limit` option:
#
# ansible-playbook -i <inventory host file> cephadm-preflight.yml --limit <my_osd_group|my_node_name>
#
# You can override variables using `--extra-vars` parameter:
#
# ansible-playbook -i <inventory host file> cephadm-preflight.yml --extra-vars "ceph_origin=rhcs"
#

- name: variables validations
  ansible.builtin.import_playbook: validate/preflight.yml

- hosts: all
  become: true
  gather_facts: true
  tasks:
    - name: import_role ceph_defaults
      import_role:
        name: ceph_defaults

    - name: redhat family of OS related tasks
      when: ansible_facts['distribution'] == 'CentOS' or ansible_facts['distribution'] == 'RedHat'
      block:
        - name: rhcs related tasks
          when: ceph_origin == 'rhcs'
          block:
            - name: enable red hat ceph storage tools repository
              rhsm_repository:
                name: "rhceph-{{ ceph_rhcs_version }}-tools-for-rhel-{{ ansible_facts['distribution_major_version'] }}-{{ ansible_facts['architecture'] }}-rpms"

            - name: disable older rhceph repositories if any
              rhsm_repository:
                name: "{{ item }}"
                state: absent
              loop:
                - rhceph-4-tools-for-rhel-8-{{ ansible_facts['architecture'] }}-rpms
                - rhceph-4-mon-for-rhel-8-{{ ansible_facts['architecture'] }}-rpms
                - rhceph-4-osd-for-rhel-8-{{ ansible_facts['architecture'] }}-rpms
              when: ansible_facts['distribution_major_version'] | int == 8

        - name: enable repo from download.ceph.com
          when: ceph_origin == 'community'
          block:
<<<<<<< HEAD
=======
            - name: set_fact _ceph_repo
              set_fact:
                _ceph_repo:
                  - name: ceph_stable
                    description: "{{ 'Ceph Stable repo' if ceph_origin == 'community' else 'IBM Ceph repo' }}"
                    rpm_key: "{{ ceph_stable_key if ceph_origin == 'community' else ceph_ibm_key }}"
                    baseurl: "{{ ceph_community_repo_baseurl if ceph_origin == 'community' else ceph_ibm_repo_baseurl }}"

>>>>>>> 2dd8356 (preflight: fix a typo)
            - name: configure ceph community repository stable key
              rpm_key:
                key: "{{ ceph_stable_key }}"
                state: present
              register: result
              until: result is succeeded

            - name: configure ceph community stable repository
              yum_repository:
                name: ceph_stable
                description: Ceph Stable $basearch repo
                gpgcheck: yes
                state: present
                gpgkey: "{{ ceph_stable_key }}"
                baseurl: "{{ ceph_mirror }}/rpm-{{ ceph_release }}/el{{ ansible_facts['distribution_major_version'] }}/$basearch"
                file: ceph_stable
                priority: '2'
              register: result
              until: result is succeeded

            - name: configure ceph community stable noarch repository
              yum_repository:
                name: ceph_stable_noarch
                description: Ceph Stable noarch repo
                gpgcheck: yes
                state: present
                gpgkey: "{{ ceph_stable_key }}"
                baseurl: "{{ ceph_mirror }}/rpm-{{ ceph_release }}/el{{ ansible_facts['distribution_major_version'] }}/noarch"
                file: ceph_stable
                priority: '2'
              register: result
              until: result is succeeded

        - name: enable repo from shaman - dev
          when: ceph_origin == 'shaman'
          block:
            - name: fetch ceph development repository
              uri:
                url: https://shaman.ceph.com/api/repos/ceph/{{ ceph_dev_branch }}/{{ ceph_dev_sha1 }}/centos/{{ ansible_facts['distribution_major_version'] }}/repo?arch={{ ansible_facts['architecture'] }}  # noqa 204
                return_content: yes
              register: ceph_dev_yum_repo

            - name: configure ceph development repository
              copy:
                content: "{{ ceph_dev_yum_repo.content }}"
                dest: /etc/yum.repos.d/ceph-dev.repo
                owner: root
                group: root
                mode: '0644'
                backup: yes

            - name: remove ceph_stable repositories
              yum_repository:
                name: '{{ item }}'
                file: ceph_stable
                state: absent
              with_items:
                - ceph_stable
                - ceph_stable_noarch

        - name: enable custom repo
          when: ceph_origin == 'custom'
          block:
            - name: set_fact ceph_custom_repositories
              set_fact:
                ceph_custom_repositories:
                  - name: ceph_custom
                    description: Ceph custom repo
                    gpgcheck: "{{ 'yes' if custom_repo_gpgkey is defined else 'no' }}"
                    state: "{{ custom_repo_state | default('present') }}"
                    gpgkey: "{{ custom_repo_gpgkey | default(omit) }}"
                    baseurl: "{{ custom_repo_url }}"
                    enabled: "{{ custom_repo_enabled | default(1) }}"
                    file: ceph_custom
                    priority: '2'
              when: ceph_custom_repositories is undefined

            - name: setup custom repositories
              yum_repository:
                name: "{{ item.name }}"
                description: "{{ item.description }}"
                state: "{{ item.state | default(omit) }}"
                gpgcheck: "{{ item.gpgcheck | default(omit) }}"
                gpgkey: "{{ item.gpgkey | default(omit) }}"
                baseurl: "{{ item.baseurl }}"
                file: "{{ item.ceph_custom | default(omit) }}"
                priority: "{{ item.priority | default(omit) }}"
                enabled: "{{ item.enabled | default(omit) }}"
              register: result
              until: result is succeeded
              loop: "{{ ceph_custom_repositories }}"

        - name: install epel-release
          when: ansible_facts['distribution'] == 'CentOS'
          block:
            - name: enable CentOS PowerTools repository for epel
              command: dnf config-manager --set-enabled powertools
              changed_when: false

            - name: install package
              package:
                name: epel-release
                state: present
              register: result
              until: result is succeeded

        - name: install ceph-common on rhel
          command: dnf install --allowerasing --assumeyes ceph-common
          changed_when: false
          register: result
          until: result is succeeded

        - name: install prerequisites packages
          package:
            name: "{{ ceph_pkgs }}"
            state: "{{ (upgrade_ceph_packages | bool) | ternary('latest', 'present') }}"
          register: result
          until: result is succeeded

        - name: ensure chronyd is running
          service:
            name: chronyd
            state: started
            enabled: yes

    - name: Ubuntu related tasks
      when: ansible_facts['distribution'] == 'Ubuntu'
      block:
        - name: enable repo from download.ceph.com
          block:
            - name: prevent ceph certificate error
              apt:
                name: ca-certificates
                state: latest
                update_cache: yes
              register: result
              until: result is succeeded

            - name: configure ceph community repository stable key
              apt_key:
                url: "{{ ceph_stable_key }}"
                state: present

            - name: configure Ceph community repository
              when: ceph_origin == 'community'
              apt_repository:
                repo: "deb https://download.ceph.com/debian-{{ ceph_release }}/ {{ ansible_facts['distribution_release'] }} main"
                state: present
                filename: ceph
                update_cache: no

            - name: configure Ceph testing repository
              when: ceph_origin == 'testing'
              apt_repository:
                repo: "deb https://download.ceph.com/debian-testing/ {{ ansible_facts['distribution_release'] }} main"
                state: present
                filename: ceph
                update_cache: no

            - name: configure Ceph custom repositories
              when: ceph_origin == 'custom'
              apt_repository:
                repo: "deb {{ item.baseurl }}/ {{ ansible_facts['distribution_release'] }} {{ item.components }}"
                state: "{{ item.state | default(omit) }}"
                filename: ceph_custom
                update_cache: no
              loop: "{{ ceph_custom_repositories }}"

        - name: install prerequisites packages
          apt:
            name: "{{ ['python3','cephadm','ceph-common'] }}"
            state: "{{ (upgrade_ceph_packages | bool) | ternary('latest', 'present') }}"
            update_cache: yes
          register: result
          until: result is succeeded

        - name: install container engine
          block:
            - name: install podman
              when: ansible_facts['distribution_version'] is version('20.10', '>=')
              apt:
                name: podman
                state: present
                update_cache: yes
              register: result
              until: result is succeeded

            - name: install docker
              when: ansible_facts['distribution_version'] is version('20.10', '<')
              block:
                - name: uninstall old version packages
                  apt:
                    name: "{{ item }}"
                    state: absent
                  loop:
                    - docker
                    - docker-engine
                    - docker.io
                    - containerd
                    - runc

                - name: configure docker repository key
                  apt_key:
                    url: "https://download.docker.com/linux/ubuntu/gpg"
                    state: present

                - name: setup docker repository
                  apt_repository:
                    repo: "deb https://download.docker.com/linux/ubuntu {{ ansible_facts['distribution_release'] }} stable"
                    state: present
                    filename: docker
                    update_cache: no

                - name: install docker
                  apt:
                    name: "{{ item }}"
                    state: present
                    update_cache: yes
                  register: result
                  until: result is succeeded
                  loop:
                    - docker-ce
                    - docker-ce-cli
                    - containerd.io

- name: set insecure container registry in /etc/containers/registries.conf
  ansible.builtin.import_playbook: cephadm-set-container-insecure-registries.yml
  when: set_insecure_registries | default(false) | bool